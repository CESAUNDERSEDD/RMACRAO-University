<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Registrar Office Story</title>
    <style>
        /* Basic styling */
        body { font-family: Arial, sans-serif; background-color: #f4f4f4; margin: 0; padding: 0; display: flex; flex-direction: column; align-items: center; height: 100vh; overflow: hidden; }
        #welcomeMessage { font-size: 18px; font-weight: bold; margin: 10px; text-align: center; }
        #gameArea { width: 500px; height: 500px; position: relative; background-image: url('RMACRAOUniversity1.png'); background-size: cover; background-position: center; border: 1px solid #ddd; box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); }

        /* Desk container styling */
        .desk-container { position: absolute; width: 80px; height: 70px; display: flex; flex-direction: column; align-items: center; }
        .desk { background-color: #f5f5dc; border: 2px solid #ddd; border-radius: 8px; width: 80px; height: 40px; display: flex; justify-content: center; align-items: center; box-shadow: 2px 2px 5px rgba(0, 0, 0, 0.2); text-align: center; font-size: 12px; font-weight: bold; color: #333; cursor: pointer; }
        .automated { box-shadow: 0 0 10px 2px #3c744c; border-color: #3c744c; cursor: not-allowed; }
        .worker { width: 25px; height: 25px; border-radius: 50%; position: absolute; top: -10px; display: none; } /* This will be hidden when the desk is automated */
        .progress-bar { width: 80%; height: 6px; background-color: #ddd; border-radius: 3px; overflow: hidden; margin-top: 5px; display: none; }
        .progress-bar-fill { height: 100%; width: 0; background-color: #33348c; transition: width linear; }

        /* Positioning each desk based on your numbered layout */
        #deskContainer1 { top: 51%; left: 42%; }
        #deskContainer2 { top: 25%; left: 42%; }
        #deskContainer3 { top: 51%; left: 75%; }
        #deskContainer4 { top: 51%; left: 16%; }
        #deskContainer5 { top: 70%; left: 58%; }
        #deskContainer6 { top: 70%; left: 32%; }
        #deskContainer7 { top: 70%; left: 73%; }
        #deskContainer8 { top: 70%; left: 18%; }
        #deskContainer9 { top: 70%; left: 85%; }
        #deskContainer10 { top: 70%; left: 6%; }

        #infoPanel { margin-top: 20px; font-weight: bold; text-align: center; }
        #notification { color: #3c744c; font-weight: bold; margin-top: 10px; min-height: 20px; transition: opacity 0.5s; opacity: 0; }
        #totalPointsDisplay { font-size: 16px; margin-bottom: 10px; font-weight: bold; color: #333; }

        /* Floating points styling */
        .floating-points {
            position: absolute;
            font-size: 16px;
            color: #33348c; /* Set the color to purple */
            transition: transform 1s ease, opacity 1s ease; /* Smooth transition */
            opacity: 1; /* Start fully visible */
        }

        /* Student image styling */
        .student-image {
            position: absolute;
            width: 25px; /* Adjust size as needed */
            height: 25px; /* Adjust size as needed */
            display: none; /* Start hidden */
            border-radius: 50%; /* Make it circular */
        }
    </style>
</head>
<body>

<div id="welcomeMessage">Welcome to the Office of the Registrar, at RMACRAO University. Process some forms to gain points. Click the desk to process a form.</div>

<div id="totalPointsDisplay">Total CSP Earned: 0</div>

<div id="gameArea">
    <!-- Initial Desk - Add/Drop Desk -->
    <div class="desk-container" id="deskContainer1">
        <div class="desk" id="desk1" onclick="serveStudent(1)">Add/Drop Desk</div>
        <div class="worker" id="worker1"></div>
        <div class="progress-bar" id="progressBar1"><div class="progress-bar-fill" id="progressFill1"></div></div>
    </div>

    <!-- Add the student image element -->
    <img id="studentImage" src="Student1.png" alt="Student Worker" class="student-image" />
</div>

<div id="infoPanel">
    <div id="notification"></div>
    <p id="pointsDisplay">Customer Service Points (CSP): 0</p>
    <button id="buyDeskButton" onclick="buyNextDesk()">Buy Degree Audit (100 CSP)</button>
    <button id="hireWorkerButton1" onclick="hireWorker(1, 30)">Hire Work-Study Student for Add/Drop Desk (30 CSP)</button>
</div>

<script>
    let csp = 0;
    let totalCspEarned = 0;
    let deskUnlocked = { 1: true };
    let hasWorker = {};
    let processingTimes = { 1: 1500 };
    let pointsPerDesk = { 1: 5 };
    let nextDeskToBuy = 2;
    let baseDeskCost = 50;
    let baseHireCost = 30;
    let deskInProgress = {};
    const penaltyTime = 30000; // 30 seconds penalty time

    const deskLabels = [
        "Add/Drop Desk", "Degree Audit", "Transcript Processing",
        "Enrollment Verification", "Graduation Clearance", "Change of Major",
        "Course Substitution", "Transfer Credit Evaluation", "Advising Appointments",
        "Special Accommodations"
    ];

    // Array of student image paths
    const studentImages = [
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student1.png',
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student2.png',
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student3.png',
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student4.png',
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student5.png',
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student6.png',
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student7.png',
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student8.png',
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student9.png',
        'C:/Users/chads/Desktop/Chad/PythonFiles/Registrar Games/Student10.png',
    ];

    const ferpaQuestions = [
        {
            question: "What does FERPA stand for?",
            options: ["Family Educational Rights and Privacy Act", "Federal Educational Rights and Privacy Act", "Family Education Rights Privacy Act"],
            answer: 0 // Index of the correct answer
        },
        {
            question: "What is one right that FERPA grants to students?",
            options: ["Access to their educational records", "Control of their academic schedule", "Eligibility for financial aid"],
            answer: 0
        },
        {
            question: "Which type of information is considered directory information under FERPA?",
            options: ["Grades", "Student's name, address, and telephone number", "Disciplinary records"],
            answer: 1
        },
        {
            question: "How long does a school have to comply with a studentâ€™s request to inspect their records under FERPA?",
            options: ["30 days", "60 days", "45 days"],
            answer: 2
        },
        {
            question: "Can a school disclose a student's information to parents without consent?",
            options: ["Yes, always", "Only if the student is a dependent", "No, never"],
            answer: 1
        },
        {
            question: "What is the penalty for violating FERPA regulations?",
            options: ["Fines", "Loss of federal funding", "Both of the above"],
            answer: 1
        },
        {
            question: "Are there exceptions to the consent requirement for disclosing educational records?",
            options: ["Yes, for school officials with legitimate interests", "No, consent is always required", "Only for law enforcement"],
            answer: 0
        },
        {
            question: "What must a school provide to students regarding their educational records?",
            options: ["A copy of FERPA", "Notification of their rights under FERPA", "Access to their grades"],
            answer: 1
        },
        {
            question: "How can students file a complaint if they believe their rights under FERPA have been violated?",
            options: ["By sending an email to the registrar", "By filing a complaint with the Family Policy Compliance Office", "By contacting their professors"],
            answer: 1
        },
        {
            question: "What is one example of information that is not protected under FERPA?",
            options: ["Publicly available information", "Grades", "Student ID numbers"],
            answer: 0
        }
    ];

    function showNotification(message) {
        const notification = document.getElementById("notification");
        notification.innerText = message;
        notification.style.opacity = 1;
        setTimeout(() => { notification.style.opacity = 0; }, 3000);
    }

    function updateDisplay() {
        document.getElementById("pointsDisplay").innerText = `Customer Service Points (CSP): ${csp}`;
        document.getElementById("totalPointsDisplay").innerText = `Total CSP Earned: ${totalCspEarned}`;
    }

	function createFloatingPoints(points, deskNumber) {
		const pointElement = document.createElement("div");
		pointElement.className = "floating-points";
		pointElement.innerText = `+$${points}`;
		pointElement.style.color = '#33348c'; // Set the color to purple

		// Position the element at the desk's location
		const desk = document.getElementById(`deskContainer${deskNumber}`); // Make sure this ID matches your desk container ID
		const deskRect = desk.getBoundingClientRect();
		pointElement.style.left = `${deskRect.left + deskRect.width / 2}px`;
		pointElement.style.top = `${deskRect.top + deskRect.height / 2}px`;

		document.body.appendChild(pointElement);

		// Animate the points floating away from the desk
		setTimeout(() => {
			// Move the points upwards and fade out
			pointElement.style.transform = 'translateY(-50px)'; // Adjust the value to change how far it floats
			pointElement.style.opacity = 0; // Fade out effect
		}, 0);

		// Remove the element after the animation is complete
		setTimeout(() => {
			pointElement.remove();
		}, 1050); // Adjust timing to match the animation duration
	}



    function buyNextDesk() {
        const deskNumber = nextDeskToBuy;
        const deskCost = baseDeskCost * deskNumber;
        if (csp >= deskCost && !deskUnlocked[deskNumber]) {
            csp -= deskCost;
            deskUnlocked[deskNumber] = true;

            // Show FERPA question before unlocking the desk
            showFERPAPopup(deskNumber);
        } else {
            showNotification("Not enough CSP or desk already unlocked!");
        }
    }

    function showFERPAPopup(deskNumber) {
        const popup = document.createElement("div");
        popup.id = "ferpaQuestionPopup";
        popup.innerHTML = `

            <div style="background-color: white; padding: 20px; border: 1px solid #ccc;">
                <h3>FERPA Question</h3>
                <p>${ferpaQuestions[deskNumber - 1].question}</p>
                ${ferpaQuestions[deskNumber - 1].options.map((option, index) => `
                    <label>
                        <input type="radio" name="ferpaOption" value="${index}"> ${option}
                    </label><br>
                `).join('')}
                <button onclick="checkFERPAAnswer(${deskNumber})">Submit</button>
                <button onclick="closeFERPAPopup()">Cancel</button>
            </div>
        `;
        document.body.appendChild(popup);
    }

    function closeFERPAPopup() {
        const popup = document.getElementById("ferpaQuestionPopup");
        if (popup) {
            document.body.removeChild(popup);
        }
    }

	function checkFERPAAnswer(deskNumber) {
		const selectedOption = document.querySelector('input[name="ferpaOption"]:checked');
		if (selectedOption) {
			const selectedIndex = parseInt(selectedOption.value);
			if (selectedIndex === ferpaQuestions[deskNumber - 1].answer) {
				closeFERPAPopup();
				unlockDesk(deskNumber); // Unlock the desk if the answer is correct
			} else {
				showNotification("Incorrect answer! Please wait 30 seconds before trying again.");
				closeFERPAPopup();
				setTimeout(() => {
					showNotification("You can try answering again now.");
					showFERPAPopup(deskNumber); // Show the question again after penalty
				}, penaltyTime);
			}
		} else {
			showNotification("Please select an answer.");
		}
	}


    function unlockDesk(deskNumber) {
        const newDeskContainer = document.createElement("div");
        newDeskContainer.className = "desk-container";
        newDeskContainer.id = `deskContainer${deskNumber}`;

        const newDesk = document.createElement("div");
        newDesk.className = "desk";
        newDesk.id = `desk${deskNumber}`;
        newDesk.innerText = deskLabels[deskNumber - 1];
        newDesk.onclick = () => serveStudent(deskNumber);

        const worker = document.createElement("div");
        worker.className = "worker";
        worker.id = `worker${deskNumber}`;

        const progressBar = document.createElement("div");
        progressBar.className = "progress-bar";
        progressBar.id = `progressBar${deskNumber}`;
        
        const progressFill = document.createElement("div");
        progressFill.className = "progress-bar-fill";
        progressFill.id = `progressFill${deskNumber}`;

        progressBar.appendChild(progressFill);
        newDeskContainer.appendChild(newDesk);
        newDeskContainer.appendChild(worker);
        newDeskContainer.appendChild(progressBar);
        document.getElementById("gameArea").appendChild(newDeskContainer);

        processingTimes[deskNumber] = processingTimes[deskNumber - 1] + 2000;
        pointsPerDesk[deskNumber] = pointsPerDesk[deskNumber - 1] + 3;

        const hireCost = baseHireCost * deskNumber;
        const hireWorkerButton = document.createElement("button");
        hireWorkerButton.id = `hireWorkerButton${deskNumber}`;
        hireWorkerButton.innerText = `Hire Work-Study Student for ${deskLabels[deskNumber - 1]} (${hireCost} CSP)`;
        hireWorkerButton.onclick = () => hireWorker(deskNumber, hireCost);
        document.getElementById("infoPanel").appendChild(hireWorkerButton);

        nextDeskToBuy += 1;
        if (nextDeskToBuy <= deskLabels.length) {
            document.getElementById("buyDeskButton").innerText = `Buy ${deskLabels[nextDeskToBuy - 1]} (${baseDeskCost * nextDeskToBuy} CSP)`;
        } else {
            document.getElementById("buyDeskButton").style.display = "none";
        }

        updateDisplay();
        showNotification(`${deskLabels[deskNumber - 1]} unlocked!`);
    }

	function serveStudent(deskNumber) {
		// When the desk is not automated
		if (deskNumber === 1 && !hasWorker[1]) { 
			csp += pointsPerDesk[deskNumber];
			totalCspEarned += pointsPerDesk[deskNumber];
			updateDisplay();
			createFloatingPoints(pointsPerDesk[deskNumber], deskNumber); // Call floating points function
			showNotification(`Served a student at ${deskLabels[deskNumber - 1]}`); 
		} 
		// When the desk is automated
		else if (deskUnlocked[deskNumber]) {
			if (hasWorker[deskNumber]) {
				showNotification(`This desk is automated. Please wait for processing.`);
				return; // Exit function if desk is automated
			}
			if (!deskInProgress[deskNumber]) {
				deskInProgress[deskNumber] = true;

				const progressFill = document.getElementById(`progressFill${deskNumber}`);
				progressFill.style.transition = 'none'; // Disable transitions for immediate action
				progressFill.style.width = '0%'; // Reset the progress bar to 0%

				// Start filling the progress bar immediately
				progressFill.style.transition = `width ${processingTimes[deskNumber]}ms linear`;
				progressFill.style.width = '100%'; // Fill the progress bar

				// After the progress fills, give points and reset the bar
				setTimeout(() => {
					csp += pointsPerDesk[deskNumber];
					totalCspEarned += pointsPerDesk[deskNumber];
					updateDisplay();
					createFloatingPoints(pointsPerDesk[deskNumber], deskNumber); // Call floating points function
					showNotification(`Served a student at ${deskLabels[deskNumber - 1]}`);

					// Immediately reset the progress bar without backtracking
					progressFill.style.transition = 'none'; // Disable transition
					progressFill.style.width = '0%'; // Reset the progress bar
					deskInProgress[deskNumber] = false; // Mark the desk as not in progress

					// Show the student image instead of the blue dot
					showStudentImage(deskNumber);
				}, processingTimes[deskNumber]);
			}
		}
	}


    function hireWorker(deskNumber, hireCost) {
        if (csp >= hireCost && !hasWorker[deskNumber]) {
            csp -= hireCost;
            hasWorker[deskNumber] = true;
            document.getElementById(`worker${deskNumber}`).style.display = "none"; // Hide the worker
            document.getElementById(`desk${deskNumber}`).classList.add("automated");
            document.getElementById(`progressBar${deskNumber}`).style.display = "block";
            document.getElementById(`hireWorkerButton${deskNumber}`).style.display = "none";
            startAutoProcessing(deskNumber);
            updateDisplay();
            
            // Show the student image for the desk
            const studentImage = document.createElement("img");
            studentImage.className = "student-image"; // Add class for styling
            const randomIndex = Math.floor(Math.random() * studentImages.length);
            studentImage.src = studentImages[randomIndex]; // Use random image
            studentImage.style.display = "block"; // Show the student image
            // Position it at the desk
            studentImage.style.top = `${document.getElementById(`deskContainer${deskNumber}`).offsetTop - 15}px`;
            studentImage.style.left = `${document.getElementById(`deskContainer${deskNumber}`).offsetLeft + 30}px`; // Adjust positioning
            document.getElementById("gameArea").appendChild(studentImage); // Append new image to the game area
        } else {
            showNotification("Not enough CSP or worker already hired for this desk!");
        }
    }

	function startAutoProcessing(deskNumber) {
		setInterval(() => {
			if (!deskInProgress[deskNumber]) {
				deskInProgress[deskNumber] = true;
				const progressFill = document.getElementById(`progressFill${deskNumber}`);
				progressFill.style.transition = 'none'; // Disable transitions for immediate action
				progressFill.style.width = '0%'; // Reset to 0%

				// Start filling the progress bar immediately
				progressFill.style.transition = `width ${processingTimes[deskNumber]}ms linear`;
				progressFill.style.width = '100%'; // Fill the progress bar

				setTimeout(() => {
					csp += pointsPerDesk[deskNumber] - 2; // Adjust points as needed
					totalCspEarned += pointsPerDesk[deskNumber] - 2;
					updateDisplay();
					
					// Create the floating points effect
					createFloatingPoints(pointsPerDesk[deskNumber], deskNumber); // Call floating points function
					
					// Immediately reset the progress bar without backtracking
					progressFill.style.transition = 'none'; // Disable transition
					progressFill.style.width = '0%'; // Clear the progress bar
					deskInProgress[deskNumber] = false; // Mark the desk as not in progress
				}, processingTimes[deskNumber]);
			}
		}, processingTimes[deskNumber]); // Control the interval timing based on processing time
	}


    function showStudentImage(deskNumber) {
        const studentImage = document.createElement("img");
        studentImage.className = "student-image"; // Add class for styling
        const randomIndex = Math.floor(Math.random() * studentImages.length);
        studentImage.src = studentImages[randomIndex]; // Use random image
        studentImage.style.display = "block"; // Show the student image
        // Position it at the desk
        studentImage.style.top = `${document.getElementById(`deskContainer${deskNumber}`).offsetTop - 1000}px`; // Adjust positioning
        studentImage.style.left = `${document.getElementById(`deskContainer${deskNumber}`).offsetLeft + 30}px`; // Adjust positioning
        document.getElementById("gameArea").appendChild(studentImage); // Append new image to the game area
    }

    updateDisplay();
</script>

</body>
</html>
